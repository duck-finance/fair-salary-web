{"version":3,"sources":["components/Form/Form.tsx","components/Chart/Chart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","FormContainer","Form","formState","onChange","placeholder","value","target","salary","type","date","MONTH","generateCategories","initialDate","today","Date","result","getMonth","getFullYear","push","Chart","categories","options","chart","id","zoom","enabled","xaxis","stroke","curve","fill","gradient","shade","gradientToColors","undefined","opacityFrom","opacityTo","stops","colorStops","offset","color","opacity","series","name","data","map","Math","round","random","getApexChartState","height","console","log","App","useState","handleChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kbAaA,IAAMA,EAAYC,IAAOC,IAAV,KAKTC,EAAgBF,IAAOC,IAAV,KAIZ,SAASE,EAAT,GAA+C,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,SAahC,OACE,kBAACN,EAAD,KACE,yJACA,kBAACG,EAAD,KACE,gFACA,2BACEI,YAAY,6BACZD,SAnBR,YAEyC,IAD7BE,EAC4B,EADtCC,OAAUD,MAEVF,EAAS,eAAKD,EAAN,CAAiBK,OAAQF,MAiB3BA,MAAOH,EAAUK,SAEnB,yJACA,2BACEC,KAAK,OACLJ,YAAY,yKACZC,MAAOH,EAAUO,KACjBN,SArBR,YAEyC,IAD7BE,EAC4B,EADtCC,OAAUD,MAEVF,EAAS,eAAKD,EAAN,CAAiBO,KAAMJ,U,YCxB7BK,EAAQ,CACZ,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAGF,SAASC,EAAmBC,GAK1B,IAJA,IAAMC,EAAQ,IAAIC,KACZC,EAAS,GACXN,EAAO,IAAIK,KAAKF,GAGlBH,EAAKO,YAAcH,EAAMG,YACzBP,EAAKQ,eAAiBJ,EAAMI,eAE5BF,EAAOG,KAAKR,EAAMD,EAAKO,aACvBP,EAAO,IAAIK,KAAKL,EAAKQ,cAAeR,EAAKO,WAAa,GAGxD,OAAOD,EAsDF,SAASI,EAAT,GAAqC,EAApBjB,UACtB,OAAO,kBAAC,IAAD,iBAlDT,WACE,IAAMkB,EAAaT,EAAmB,cACtC,MAAO,CACLU,QAAS,CACPC,MAAO,CACLC,GAAI,QACJC,KAAM,CACJC,SAAS,IAGbC,MAAO,CACLN,cAEFO,OAAQ,CACNC,MAAO,UAETC,KAAM,CACJrB,KAAM,WACNsB,SAAU,CACRC,MAAO,OACPvB,KAAM,WACNwB,sBAAkBC,EAClBC,YAAa,EACbC,UAAW,EACXC,MAAO,CAAC,EAAG,GAAI,KACfC,WAAY,CACV,CACEC,OAAQ,EACRC,MAAO,OACPC,QAAS,GAEX,CACEF,OAAQ,IACRC,MAAO,MACPC,QAAS,OAMnBC,OAAQ,CACN,CACEC,KAAM,6HACNC,KAAMvB,EAAWwB,KAAI,kBAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,gBAO3BC,GAAf,CAAoCxC,KAAK,OAAOyC,OAAQ,OApDjEC,QAAQC,IAAIxC,EAAmB,eCrBhByC,MAdf,WAAgB,IAAD,EACqBC,mBAAoB,CACpD5C,KAAM,GACNF,OAAQ,KAHG,mBACNL,EADM,KACKoD,EADL,KAMb,OACE,kBAAC,WAAD,KACE,kBAACrD,EAAD,CAAMC,UAAWA,EAAWC,SAAUmD,IACtC,kBAACnC,EAAD,CAAOjB,UAAWA,MCDJqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.8f87865e.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport type FormState = {\n  salary: string;\n  date: string;\n};\n\ntype Props = {\n  onChange: (form: FormState) => void;\n  formState: FormState;\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst FormContainer = styled.div`\n  width: 240px;\n`;\n\nexport function Form({ formState, onChange }: Props) {\n  function handleChangeSalary({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) {\n    onChange({ ...formState, salary: value });\n  }\n\n  function handleChangeDate({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) {\n    onChange({ ...formState, date: value });\n  }\n\n  return (\n    <Container>\n      <h1>Справедливая зарплата</h1>\n      <FormContainer>\n        <p>Я получаю</p>\n        <input\n          placeholder=\"20 000 руб.\"\n          onChange={handleChangeSalary}\n          value={formState.salary}\n        />\n        <p>Последний раз менялась</p>\n        <input\n          type=\"date\"\n          placeholder=\"Когда последний раз повышалась?\"\n          value={formState.date}\n          onChange={handleChangeDate}\n        />\n      </FormContainer>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport ApexChart from \"react-apexcharts\";\nimport { FormState } from \"../Form/Form\";\n\ntype Props = {\n  formState: FormState;\n};\n\nconst MONTH = [\n  \"Янв\",\n  \"Фев\",\n  \"Мар\",\n  \"Апр\",\n  \"Май\",\n  \"Июн\",\n  \"Июл\",\n  \"Авг\",\n  \"Сен\",\n  \"Окт\",\n  \"Ноя\",\n  \"Дек\",\n];\n\nfunction generateCategories(initialDate: string) {\n  const today = new Date();\n  const result = [];\n  let date = new Date(initialDate);\n\n  while (\n    date.getMonth() <= today.getMonth() ||\n    date.getFullYear() <= today.getFullYear()\n  ) {\n    result.push(MONTH[date.getMonth()]);\n    date = new Date(date.getFullYear(), date.getMonth() + 1);\n  }\n\n  return result;\n}\n\nconsole.log(generateCategories(\"2009.01.01\"));\n\nfunction getApexChartState() {\n  const categories = generateCategories(\"2009.01.01\");\n  return {\n    options: {\n      chart: {\n        id: \"chart\",\n        zoom: {\n          enabled: false,\n        },\n      },\n      xaxis: {\n        categories,\n      },\n      stroke: {\n        curve: \"smooth\",\n      },\n      fill: {\n        type: \"gradient\",\n        gradient: {\n          shade: \"dark\",\n          type: \"vertical\",\n          gradientToColors: undefined,\n          opacityFrom: 1,\n          opacityTo: 1,\n          stops: [0, 50, 100],\n          colorStops: [\n            {\n              offset: 0,\n              color: \"blue\",\n              opacity: 1,\n            },\n            {\n              offset: 100,\n              color: \"red\",\n              opacity: 1,\n            },\n          ],\n        },\n      },\n    },\n    series: [\n      {\n        name: \"Ваша реальная зарплата\",\n        data: categories.map(() => Math.round(Math.random() * 100)),\n      },\n    ],\n  };\n}\n\nexport function Chart({ formState }: Props) {\n  return <ApexChart {...getApexChartState()} type=\"line\" height={400} />;\n}\n","import React, { useState, Fragment } from \"react\";\nimport { Form, FormState } from \"./components/Form/Form\";\nimport { Chart } from \"./components/Chart/Chart\";\n\nfunction App() {\n  const [formState, handleChange] = useState<FormState>({\n    date: \"\",\n    salary: \"\",\n  });\n\n  return (\n    <Fragment>\n      <Form formState={formState} onChange={handleChange} />\n      <Chart formState={formState} />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}