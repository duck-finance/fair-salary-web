{"version":3,"sources":["components/Form/Form.tsx","components/Chart/EmptyState.tsx","components/Chart/UnrealState.tsx","components/Chart/Header.tsx","components/Chart/getData.tsx","components/Chart/useChartData.ts","components/Chart/Chart.tsx","components/Chart/getApexChartState.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","Form","formState","onChange","placeholder","value","target","salary","type","date","EmptyState","UnrealState","role","aria-label","Header","num","cases","nom","gen","plu","Math","abs","toString","indexOf","nextMonth","_","index","allItems","currentMonth","length","currentDate","Date","getFullYear","getMonth","getTime","nextValue","round","random","getData","Array","fill","map","item","x","y","nextPoint","isEnabledAnimations","isUnrealSalary","Chart","Number","undefined","data","resultSalary","isEmptySalary","apexChartProps","options","chart","id","toolbar","show","zoom","enabled","animations","grid","xaxis","lines","yaxis","stroke","curve","gradient","shade","gradientToColors","opacityFrom","opacityTo","stops","colorStops","offset","color","opacity","series","name","annotations","borderColor","label","style","text","getApexChartState","useChart","height","App","useState","handleChange","Typography","variant","align","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.636de4bb.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport type FormState = {\n  salary: string;\n  date: string;\n};\n\ntype Props = {\n  onChange: (form: FormState) => void;\n  formState: FormState;\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 240px;\n`;\n\nexport function Form({ formState, onChange }: Props) {\n  function handleChangeSalary({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) {\n    onChange({ ...formState, salary: value });\n  }\n\n  function handleChangeDate({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) {\n    onChange({ ...formState, date: value });\n  }\n\n  return (\n    <Container>\n      <p>–Ø –ø–æ–ª—É—á–∞—é</p>\n      <input\n        placeholder=\"20 000 —Ä—É–±.\"\n        onChange={handleChangeSalary}\n        value={formState.salary}\n      />\n      <p>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –º–µ–Ω—è–ª–∞—Å—å</p>\n      <input\n        type=\"date\"\n        placeholder=\"–ö–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–æ–≤—ã—à–∞–ª–∞—Å—å?\"\n        value={formState.date}\n        onChange={handleChangeDate}\n      />\n    </Container>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: 400px;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport function EmptyState() {\n  return (\n    <Container>\n      <h2>–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É</h2>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: 400px;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport function UnrealState() {\n  return (\n    <Container>\n      <h2>\n        –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å —Å—É–º–º–∞–º–∏ –æ—Ç 1000 —Ä—É–±–ª–µ–π{\" \"}\n        <span role=\"img\" aria-label=\"–∫–æ–ª–µ—á–∫–æ —Å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–º –∫–∞–º–Ω–µ–º\">\n          üíç\n        </span>\n      </h2>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n`;\n\nfunction units(num: number, cases: any) {\n  num = Math.abs(num);\n\n  var word = \"\";\n\n  if (num.toString().indexOf(\".\") > -1) {\n    word = cases.gen;\n  } else {\n    word =\n      num % 10 === 1 && num % 100 !== 11\n        ? cases.nom\n        : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)\n        ? cases.gen\n        : cases.plu;\n  }\n\n  return word;\n}\n\nexport function Header({ salary }: any) {\n  return (\n    <Container>\n      <h2>\n        –í–∞—à–∞ —Ä–µ–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {salary}{\" \"}\n        {units(salary, { nom: \"—Ä—É–±–ª—å\", gen: \"—Ä—É–±–ª—è\", plu: \"—Ä—É–±–ª–µ–π\" })}\n      </h2>\n    </Container>\n  );\n}\n","const nextMonth = (_: any, index: number, allItems: any[]) => {\n  const currentMonth = allItems.length - index;\n  const currentDate = new Date();\n  return new Date(\n    currentDate.getFullYear(),\n    currentDate.getMonth() - currentMonth\n  ).getTime();\n};\n\nconst nextValue = (salary: number) => (_: any, index: number) =>\n  Math.round(salary + salary * ((index / 1000) * Math.random()));\n\nconst nextPoint = (salary: number) => (\n  item: any,\n  index: number,\n  allItems: any[]\n) => ({\n  x: nextMonth(item, index, allItems),\n  y: nextValue(salary)(item, index),\n});\n\nexport const getData = (salary: number) => {\n  return new Array(15).fill(0).map(nextPoint(salary));\n};\n","import { FormState } from \"../Form/Form\";\nimport { getData } from \"./getData\";\nimport { getApexChartState } from \"./getApexChartState\";\n\nconst UNREAL_SALARY = 1000;\nconst ANIMATION_SALARY = 9999;\n\n/**\n * –§–∏–∫—Å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ–º, —á—Ç–æ –¥—ë—Ä–≥–∞—é—Ç—Å—è –≥—Ä–∞—Ñ–∏–∫–∏\n */\nfunction isEnabledAnimations(salary: number) {\n  return salary > ANIMATION_SALARY;\n}\n\nfunction isUnrealSalary(salary: number) {\n  return salary < UNREAL_SALARY;\n}\n\nexport function useChart(formState: FormState) {\n  const salary = Number(formState.salary) || undefined;\n  const data = (salary && getData(salary)) || undefined;\n  const resultSalary = (data && data[data.length - 1].y) || undefined;\n  const apexChartProps = getApexChartState({\n    data,\n    isEnabledAnimations: !!salary && isEnabledAnimations(salary),\n  });\n  const isEmptySalary = !salary;\n\n  return {\n    apexChartProps,\n    resultSalary,\n    isUnrealSalary: salary && isUnrealSalary(salary),\n    isEmptySalary,\n  };\n}\n","import React, { Fragment } from \"react\";\nimport ApexChart from \"react-apexcharts\";\nimport { FormState } from \"../Form/Form\";\nimport { EmptyState } from \"./EmptyState\";\nimport { UnrealState } from \"./UnrealState\";\nimport { Header } from \"./Header\";\nimport { useChart } from \"./useChartData\";\n\ntype Props = {\n  formState: FormState;\n};\n\nexport function Chart({ formState }: Props) {\n  const {\n    isEmptySalary,\n    isUnrealSalary,\n    apexChartProps,\n    resultSalary,\n  } = useChart(formState);\n\n  if (isEmptySalary) {\n    return <EmptyState />;\n  }\n\n  if (isUnrealSalary) {\n    return <UnrealState />;\n  }\n\n  return (\n    <Fragment>\n      <Header salary={resultSalary} />\n      <ApexChart {...apexChartProps} type=\"line\" height={400} />\n    </Fragment>\n  );\n}\n","type ApexChartState = {\n  data: any;\n  isEnabledAnimations: boolean;\n};\n\nexport function getApexChartState({\n  data,\n  isEnabledAnimations,\n}: ApexChartState) {\n  return {\n    options: {\n      chart: {\n        id: \"chart\",\n        toolbar: {\n          show: false,\n        },\n        zoom: {\n          enabled: false,\n        },\n        animations: {\n          enabled: isEnabledAnimations,\n        },\n      },\n      grid: {\n        xaxis: {\n          lines: {\n            show: true,\n          },\n        },\n        yaxis: {\n          lines: {\n            show: true,\n          },\n        },\n      },\n      xaxis: {\n        type: \"datetime\",\n      },\n      stroke: {\n        curve: \"smooth\",\n      },\n      fill: {\n        type: \"gradient\",\n        gradient: {\n          shade: \"dark\",\n          type: \"vertical\",\n          gradientToColors: undefined,\n          opacityFrom: 1,\n          opacityTo: 1,\n          stops: [0, 50, 100],\n          colorStops: [\n            {\n              offset: 0,\n              color: \"#FF0\",\n              opacity: 1,\n            },\n            {\n              offset: 100,\n              color: \"#D0D\",\n              opacity: 1,\n            },\n          ],\n        },\n      },\n    },\n    series: [\n      {\n        name: \"–†–µ–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞\",\n        data,\n      },\n    ],\n    annotations: {\n      xaxis: [\n        {\n          x: \"–§–µ–≤\",\n          borderColor: \"#775DD0\",\n          label: {\n            style: {\n              color: \"#fff\",\n            },\n            text: \"X-axis annotation - 22 Nov\",\n          },\n        },\n      ],\n    },\n  };\n}\n","import React, { useState, Fragment } from \"react\";\nimport { Form, FormState } from \"./components/Form/Form\";\nimport { Chart } from \"./components/Chart/Chart\";\nimport { Typography } from \"@material-ui/core\";\n\nfunction App() {\n  const [formState, handleChange] = useState<FormState>({\n    date: \"\",\n    salary: \"\",\n  });\n\n  return (\n    <Fragment>\n      <Typography variant=\"h1\" align=\"center\">\n        –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞\n      </Typography>\n      <Form formState={formState} onChange={handleChange} />\n      <Chart formState={formState} />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}